{"version":3,"file":"terra-draw-route-snap-mode.cjs","sources":["../src/kdbush/kdbush.ts","../src/kdbush/tinyqueue.ts","../src/kdbush/geokdbush.ts","../src/routing.ts","../src/terra-draw-route-snap-mode.ts"],"sourcesContent":["// Adapted from https://github.com/mourner/kdbush\n\n// ISC License\n\n// Copyright (c) 2018, Vladimir Agafonkin\n\n// Permission to use, copy, modify, and/or distribute this software for any purpose\n// with or without fee is hereby granted, provided that the above copyright notice\n// and this permission notice appear in all copies.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n// FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n// OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n// THIS SOFTWARE.\n\nconst ARRAY_TYPES = [\n    Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array,\n    Int32Array, Uint32Array, Float32Array, Float64Array\n];\n\nconst VERSION = 1;\nconst HEADER_SIZE = 8;\n\nexport class KDBush {\n    private data: ArrayBuffer;\n    public ids: Uint16Array | Uint32Array;\n    public coords: InstanceType<TypedArrayConstructor>;\n    private _pos: number;\n    private _finished: boolean;\n    private numItems: number;\n    public nodeSize: number;\n    private ArrayType: TypedArrayConstructor;\n    private IndexArrayType: typeof Uint16Array | typeof Uint32Array;\n\n    constructor(\n        numItems: number,\n        nodeSize: number = 64,\n        ArrayType: TypedArrayConstructor = Float64Array,\n        data?: ArrayBuffer\n    ) {\n        if (isNaN(numItems) || numItems < 0) {\n            throw new Error(`Unexpected numItems value: ${numItems}.`);\n        }\n\n        this.numItems = numItems;\n        this.nodeSize = Math.min(Math.max(nodeSize, 2), 65535);\n        this.ArrayType = ArrayType;\n        this.IndexArrayType = numItems < 65536 ? Uint16Array : Uint32Array;\n\n        const arrayTypeIndex = ARRAY_TYPES.indexOf(this.ArrayType);\n        const coordsByteSize = numItems * 2 * this.ArrayType.BYTES_PER_ELEMENT;\n        const idsByteSize = numItems * this.IndexArrayType.BYTES_PER_ELEMENT;\n        const padCoords = (8 - idsByteSize % 8) % 8;\n\n        if (arrayTypeIndex < 0) {\n            throw new Error(`Unexpected typed array class: ${ArrayType}.`);\n        }\n\n        if (data) {\n            this.data = data;\n            this.ids = new (this.IndexArrayType as any)(this.data, HEADER_SIZE, numItems);\n            this.coords = new (this.ArrayType as any)(this.data, HEADER_SIZE + idsByteSize + padCoords, numItems * 2);\n            this._pos = numItems * 2;\n            this._finished = true;\n        } else {\n            this.data = new ArrayBuffer(HEADER_SIZE + coordsByteSize + idsByteSize + padCoords);\n            this.ids = new (this.IndexArrayType as any)(this.data, HEADER_SIZE, numItems);\n            this.coords = new (this.ArrayType as any)(this.data, HEADER_SIZE + idsByteSize + padCoords, numItems * 2);\n            this._pos = 0;\n            this._finished = false;\n\n            new Uint8Array(this.data, 0, 2).set([0xdb, (VERSION << 4) + arrayTypeIndex]);\n            new Uint16Array(this.data, 2, 1)[0] = this.nodeSize;\n            new Uint32Array(this.data, 4, 1)[0] = this.numItems;\n        }\n    }\n\n    add(x: number, y: number): number {\n        const index = this._pos >> 1;\n        this.ids[index] = index;\n        this.coords[this._pos++] = x;\n        this.coords[this._pos++] = y;\n        return index;\n    }\n\n    finish(): this {\n        const numAdded = this._pos >> 1;\n        if (numAdded !== this.numItems) {\n            throw new Error(`Added ${numAdded} items when expected ${this.numItems}.`);\n        }\n        sort(this.ids, this.coords, this.nodeSize, 0, this.numItems - 1, 0);\n        this._finished = true;\n        return this;\n    }\n}\n\ntype TypedArrayConstructor =\n    Int8ArrayConstructor | Uint8ArrayConstructor | Uint8ClampedArrayConstructor |\n    Int16ArrayConstructor | Uint16ArrayConstructor |\n    Int32ArrayConstructor | Uint32ArrayConstructor |\n    Float32ArrayConstructor | Float64ArrayConstructor;\n\nfunction sort(\n    ids: Uint16Array | Uint32Array,\n    coords: InstanceType<TypedArrayConstructor>,\n    nodeSize: number,\n    left: number,\n    right: number,\n    axis: number\n): void {\n    if (right - left <= nodeSize) return;\n    const m = (left + right) >> 1;\n    select(ids, coords, m, left, right, axis);\n    sort(ids, coords, nodeSize, left, m - 1, 1 - axis);\n    sort(ids, coords, nodeSize, m + 1, right, 1 - axis);\n}\n\nfunction select(\n    ids: Uint16Array | Uint32Array,\n    coords: InstanceType<TypedArrayConstructor>,\n    k: number,\n    left: number,\n    right: number,\n    axis: number\n): void {\n    while (right > left) {\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const m = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp(2 * z / 3);\n            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            select(ids, coords, k, newLeft, newRight, axis);\n        }\n\n        const t = coords[2 * k + axis];\n        let i = left;\n        let j = right;\n\n        swapItem(ids, coords, left, k);\n        if (coords[2 * right + axis] > t) {\n            swapItem(ids, coords, left, right);\n        }\n\n        while (i < j) {\n            swapItem(ids, coords, i, j);\n            i++;\n            j--;\n            while (coords[2 * i + axis] < t) i++;\n            while (coords[2 * j + axis] > t) j--;\n        }\n\n        if (coords[2 * left + axis] === t) {\n            swapItem(ids, coords, left, j);\n        } else {\n            j++;\n            swapItem(ids, coords, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swapItem(\n    ids: Uint16Array | Uint32Array,\n    coords: InstanceType<TypedArrayConstructor>,\n    i: number,\n    j: number\n): void {\n    swap(ids, i, j);\n    swap(coords, 2 * i, 2 * j);\n    swap(coords, 2 * i + 1, 2 * j + 1);\n}\n\nfunction swap<T extends Uint16Array | Uint32Array | Float32Array | Float64Array | Int8Array | Int16Array | Int32Array | Uint8Array | Uint8ClampedArray>(\n    arr: T,\n    i: number,\n    j: number\n): void {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n","// Adapted from https://github.com/mourner/kdbush\n\n// ISC License\n\n// Copyright (c) 2017, Vladimir Agafonkin\n\n// Permission to use, copy, modify, and/or distribute this software for any purpose\n// with or without fee is hereby granted, provided that the above copyright notice\n// and this permission notice appear in all copies.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n// FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n// OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n// THIS SOFTWARE.\n\nexport default class TinyQueue<T> {\n\n    private data: T[];\n    public length: number;\n    private compare: (a: T, b: T) => number;\n\n    constructor(\n        data: T[] = [],\n        compare: (a: T, b: T) => number = (a, b) =>\n            a < b ? -1 : a > b ? 1 : 0\n    ) {\n        this.data = data;\n        this.length = this.data.length;\n        this.compare = compare;\n\n        if (this.length > 0) {\n            for (let i = (this.length >> 1) - 1; i >= 0; i--) {\n                this._down(i);\n            }\n        }\n    }\n\n    push(item: T): void {\n        this.data.push(item);\n        this._up(this.length++);\n    }\n\n    pop(): T | undefined {\n        if (this.length === 0) {\n            return undefined;\n        }\n\n        const top = this.data[0];\n        const bottom = this.data.pop() as T;\n\n        this.length--;\n\n        if (this.length > 0) {\n            this.data[0] = bottom;\n            this._down(0);\n        }\n\n        return top;\n    }\n\n    peek(): T | undefined {\n        return this.data[0];\n    }\n\n    private _up(pos: number): void {\n        const { data, compare } = this;\n        const item = data[pos];\n\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const current = data[parent];\n            if (compare(item, current) >= 0) {\n                break;\n            }\n            data[pos] = current;\n            pos = parent;\n        }\n\n        data[pos] = item;\n    }\n\n    private _down(pos: number): void {\n        const { data, compare } = this;\n        const halfLength = this.length >> 1;\n        const item = data[pos];\n\n        while (pos < halfLength) {\n            let bestChild = (pos << 1) + 1;\n            const right = bestChild + 1;\n\n            if (right < this.length && compare(data[right], data[bestChild]) < 0) {\n                bestChild = right;\n            }\n\n            if (compare(data[bestChild], item) >= 0) {\n                break;\n            }\n\n            data[pos] = data[bestChild];\n            pos = bestChild;\n        }\n\n        data[pos] = item;\n    }\n}\n","// Adapted from https://github.com/mourner/geokdbush\n\n// ISC License\n\n// Copyright (c) 2017, Vladimir Agafonkin\n\n// Permission to use, copy, modify, and/or distribute this software for any purpose\n// with or without fee is hereby granted, provided that the above copyright notice\n// and this permission notice appear in all copies.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n// FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n// OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n// THIS SOFTWARE.\n\nimport { KDBush } from './kdbush';\nimport TinyQueue from './tinyqueue';\n\nconst earthRadius = 6371;\nconst rad = Math.PI / 180;\n\n\nexport function around(index: KDBush, lng: number, lat: number, maxResults = Infinity, maxDistance = Infinity) {\n    let maxHaverSinDist = 1;\n    const result = [];\n\n    if (maxResults === undefined) maxResults = Infinity;\n    if (maxDistance !== undefined) maxHaverSinDist = haverSin(maxDistance / earthRadius);\n\n    // a distance-sorted priority queue that will contain both points and kd-tree nodes\n    const q = new TinyQueue([], compareDist);\n\n    // an object that represents the top kd-tree node (the whole Earth)\n    let node = {\n        left: 0, // left index in the kd-tree array\n        right: index.ids.length - 1, // right index\n        axis: 0, // 0 for longitude axis and 1 for latitude axis\n        dist: 0, // will hold the lower bound of children's distances to the query point\n        minLng: -180, // bounding box of the node\n        minLat: -90,\n        maxLng: 180,\n        maxLat: 90\n    };\n\n    const cosLat = Math.cos(lat * rad);\n\n    while (node) {\n        const right = node.right;\n        const left = node.left;\n\n        if (right - left <= index.nodeSize) { // leaf node\n\n            // add all points of the leaf node to the queue\n            for (let i = left; i <= right; i++) {\n                const id = index.ids[i];\n\n                const dist = haverSinDist(lng, lat, index.coords[2 * i], index.coords[2 * i + 1], cosLat);\n                q.push({ id, dist });\n            }\n\n        } else { // not a leaf node (has child nodes)\n\n            const m = (left + right) >> 1; // middle index\n            const midLng = index.coords[2 * m];\n            const midLat = index.coords[2 * m + 1];\n\n            // add middle point to the queue\n            const id = index.ids[m];\n            const dist = haverSinDist(lng, lat, midLng, midLat, cosLat);\n            q.push({ id, dist });\n\n\n            const nextAxis = (node.axis + 1) % 2;\n\n            // first half of the node\n            const leftNode = {\n                left,\n                right: m - 1,\n                axis: nextAxis,\n                minLng: node.minLng,\n                minLat: node.minLat,\n                maxLng: node.axis === 0 ? midLng : node.maxLng,\n                maxLat: node.axis === 1 ? midLat : node.maxLat,\n                dist: 0\n            };\n            // second half of the node\n            const rightNode = {\n                left: m + 1,\n                right,\n                axis: nextAxis,\n                minLng: node.axis === 0 ? midLng : node.minLng,\n                minLat: node.axis === 1 ? midLat : node.minLat,\n                maxLng: node.maxLng,\n                maxLat: node.maxLat,\n                dist: 0\n            };\n\n            leftNode.dist = boxDist(lng, lat, cosLat, leftNode);\n            rightNode.dist = boxDist(lng, lat, cosLat, rightNode);\n\n            // add child nodes to the queue\n            q.push(leftNode);\n            q.push(rightNode);\n        }\n\n        // fetch closest points from the queue; they're guaranteed to be closer\n        // than all remaining points (both individual and those in kd-tree nodes),\n        // since each node's distance is a lower bound of distances to its children\n        while (q.length && q.peek().id != null) {\n            const candidate = q.pop()!;\n            if (candidate.dist > maxHaverSinDist) return result;\n            result.push(candidate.id);\n            if (result.length === maxResults) return result;\n        }\n\n        // the next closest kd-tree node\n        node = q.pop();\n    }\n\n    return result;\n}\n\n// lower bound for distance from a location to points inside a bounding box\nfunction boxDist(lng: number, lat: number, cosLat: number, node: any) {\n    const minLng = node.minLng;\n    const maxLng = node.maxLng;\n    const minLat = node.minLat;\n    const maxLat = node.maxLat;\n\n    // query point is between minimum and maximum longitudes\n    if (lng >= minLng && lng <= maxLng) {\n        if (lat < minLat) return haverSin((lat - minLat) * rad);\n        if (lat > maxLat) return haverSin((lat - maxLat) * rad);\n        return 0;\n    }\n\n    // query point is west or east of the bounding box;\n    // calculate the extremum for great circle distance from query point to the closest longitude;\n    const haverSinDLng = Math.min(haverSin((lng - minLng) * rad), haverSin((lng - maxLng) * rad));\n    const extremumLat = vertexLat(lat, haverSinDLng);\n\n    // if extremum is inside the box, return the distance to it\n    if (extremumLat > minLat && extremumLat < maxLat) {\n        return haverSinDistPartial(haverSinDLng, cosLat, lat, extremumLat);\n    }\n    // otherwise return the distan e to one of the bbox corners (whichever is closest)\n    return Math.min(\n        haverSinDistPartial(haverSinDLng, cosLat, lat, minLat),\n        haverSinDistPartial(haverSinDLng, cosLat, lat, maxLat)\n    );\n}\n\nfunction compareDist(a: any, b: any) {\n    return a.dist - b.dist;\n}\n\nfunction haverSin(theta: number) {\n    const s = Math.sin(theta / 2);\n    return s * s;\n}\n\nfunction haverSinDistPartial(haverSinDLng: number, cosLat1: number, lat1: number, lat2: number) {\n    return cosLat1 * Math.cos(lat2 * rad) * haverSinDLng + haverSin((lat1 - lat2) * rad);\n}\n\nfunction haverSinDist(lng1: number, lat1: number, lng2: number, lat2: number, cosLat1: number) {\n    const haverSinDLng = haverSin((lng1 - lng2) * rad);\n    return haverSinDistPartial(haverSinDLng, cosLat1, lat1, lat2);\n}\n\nexport function distance(lng1: number, lat1: number, lng2: number, lat2: number) {\n    const h = haverSinDist(lng1, lat1, lng2, lat2, Math.cos(lat1 * rad));\n    return 2 * earthRadius * Math.asin(Math.sqrt(h));\n}\n\nfunction vertexLat(lat: number, haverSinDLng: number) {\n    const cosDLng = 1 - 2 * haverSinDLng;\n    if (cosDLng <= 0) return lat > 0 ? 90 : -90;\n    return Math.atan(Math.tan(lat * rad) / cosDLng) / rad;\n}","import { KDBush } from \"./kdbush/kdbush\";\nimport { around } from \"./kdbush/geokdbush\";\nimport {\n  FeatureCollection,\n  LineString,\n  Position,\n  Feature,\n  Point,\n} from \"geojson\";\nimport { RoutingInterface } from \"./terra-draw-route-snap-mode\";\n\ntype RouteFinder = {\n  getRoute: (positionA: Feature<Point>, positionB: Feature<Point>) => Feature<LineString> | null\n}\n/**\n * Routing class for finding routes on a network of LineStrings.\n * The LineString network must have coordinates that are shared between\n * the LineStrings in order to find a route.\n */\nexport class Routing implements RoutingInterface {\n  constructor(options: {\n    network: FeatureCollection<LineString>, useCache?: boolean,\n    routeFinder: RouteFinder\n  }) {\n    this.useCache = options.useCache || true;\n    this.network = options.network;\n\n    this.routeFinder = options.routeFinder;\n\n    this.network.features.forEach((feature) => {\n      feature.geometry.coordinates.forEach((coordinate) => {\n        this.points.push(coordinate);\n      });\n    });\n\n    this.indexedNetworkPoints = new KDBush(this.points.length);\n\n    this.points.forEach(coordinate => {\n      this.indexedNetworkPoints.add(coordinate[0], coordinate[1]);\n    })\n\n    this.indexedNetworkPoints.finish();\n  }\n  private useCache: boolean = true;\n  private indexedNetworkPoints: KDBush;\n  private points: Position[] = []\n  private routeFinder: RouteFinder;\n  private network: FeatureCollection<LineString>;\n  private routeCache: Record<string, Feature<LineString> | null> = {};\n\n  /**\n   * Return the closest network coordinate to the input coordinate\n   * @param inputCoordinate The coordinate to find the closest network coordinate to\n   * @returns a coordinate on the network or null if no coordinate is found\n   */\n  public getClosestNetworkCoordinate(inputCoordinate: Position) {\n    const aroundInput: number[] = around(\n      this.indexedNetworkPoints,\n      inputCoordinate[0],\n      inputCoordinate[1],\n      1\n    );\n\n    const nearest = this.points[aroundInput[0]]\n    return nearest ? nearest : null;\n  }\n\n  /**\n   * Get the route between two coordinates returned as a GeoJSON LineString\n   * @param startCoord start coordinate\n   * @param endCoord end coordinate\n   * @returns The route as a GeoJSON LineString\n   */\n  public getRoute(startCoord: Position, endCoord: Position): Feature<LineString> | null {\n\n    // Check if caching is enabled, and if the coordinates are already in the cache  \n    if (this.useCache) {\n      const routeKey = `${startCoord}-${endCoord}`;\n\n      if (this.routeCache[routeKey]) {\n        return this.routeCache[routeKey];\n      }\n    }\n\n    const start = {\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: startCoord,\n      },\n      properties: {},\n    } as Feature<Point>;\n\n    const end = {\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: endCoord,\n      },\n      properties: {},\n    } as Feature<Point>;\n\n    const route = this.routeFinder.getRoute(start, end);\n\n    // If caching is enabled, store the route in the cache\n    if (this.useCache) {\n      const routeKey = `${startCoord}-${endCoord}`\n      this.routeCache[routeKey] = route;\n      return route;\n    }\n\n    return route;\n\n  }\n}\n","import {\n  TerraDrawAdapterStyling,\n  TerraDrawKeyboardEvent,\n  TerraDrawMouseEvent,\n  BehaviorConfig,\n  GeoJSONStoreFeatures,\n  TerraDrawExtend\n} from \"terra-draw\";\nimport { Feature, LineString, Position } from \"geojson\";\nimport { Validation } from \"terra-draw/dist/common\";\n\ntype TerraDrawLineStringModeKeyEvents = {\n  cancel: KeyboardEvent[\"key\"] | null;\n  finish: KeyboardEvent[\"key\"] | null;\n};\n\nconst defaultKeyEvents = { cancel: \"Escape\", finish: \"Enter\" };\n\ninterface Cursors {\n  draw?: TerraDrawExtend.Cursor;\n  close?: TerraDrawExtend.Cursor;\n}\n\nconst defaultCursors = {\n  draw: \"crosshair\",\n  close: \"pointer\"\n} as Required<Cursors>;\n\nexport interface RoutingInterface {\n  getRoute: (\n    startCoord: Position,\n    endCoord: Position\n  ) => Feature<LineString> | null;\n  getClosestNetworkCoordinate: (coordinate: Position) => Position | null;\n}\n\ntype RouteStyling = {\n  lineStringWidth: TerraDrawExtend.NumericStyling;\n  lineStringColor: TerraDrawExtend.HexColorStyling\n  routePointColor: TerraDrawExtend.HexColorStyling;\n  routePointWidth: TerraDrawExtend.NumericStyling;\n  routePointOutlineColor: TerraDrawExtend.HexColorStyling;\n  routePointOutlineWidth: TerraDrawExtend.NumericStyling;\n};\n\ninterface TerraDrawPolygonModeOptions<T extends TerraDrawExtend.CustomStyling>\n  extends TerraDrawExtend.BaseModeOptions<T> {\n  routing: RoutingInterface;\n  pointerDistance?: number;\n  keyEvents?: TerraDrawLineStringModeKeyEvents | null;\n  maxPoints?: number;\n  cursors?: Partial<Cursors>;\n}\n\nconst { TerraDrawBaseDrawMode } = TerraDrawExtend;\n\nexport class TerraDrawRouteSnapMode extends TerraDrawBaseDrawMode<RouteStyling> {\n  mode = \"routesnap\" as const;\n\n  private currentCoordinate = 0;\n  private currentId: string | undefined;\n  private keyEvents: TerraDrawLineStringModeKeyEvents = defaultKeyEvents;\n  private cursors: Required<Cursors> = defaultCursors;\n\n  private maxPoints: number = 1\n  private moveLineId: string | undefined;\n  private routing!: RoutingInterface;\n  private currentPointIds: string[] = [];\n  private routeId = 0;\n\n  constructor(options?: TerraDrawPolygonModeOptions<RouteStyling>) {\n    super(options, true);\n    this.updateOptions(options);\n  }\n\n  override updateOptions(options?: Partial<TerraDrawPolygonModeOptions<RouteStyling>>) {\n    super.updateOptions(options);\n\n    if (options?.routing && options.routing !== this.routing) {\n      // We can't guarantee the rout created so far is valid with the new routing \n      // So we need to clean up the current state\n      this.cleanUp();\n      this.routing = options.routing;\n    }\n\n    if (options?.maxPoints !== undefined && options.maxPoints !== this.maxPoints && options.maxPoints > 0) {\n      this.maxPoints = options.maxPoints;\n    }\n\n    if (options?.cursors) {\n      this.cursors = { ...this.cursors, ...options.cursors };\n    }\n\n    // null is the case where we want to explicitly turn key bindings off\n    if (options?.keyEvents === null) {\n      this.keyEvents = { cancel: null, finish: null };\n    } else if (options?.keyEvents) {\n      this.keyEvents = { ...this.keyEvents, ...options.keyEvents };\n    }\n  }\n\n  private pixelDistance = (\n    pointOne: { x: number; y: number },\n    pointTwo: { x: number; y: number }\n  ) => {\n    const { x: x1, y: y1 } = pointOne;\n    const { x: x2, y: y2 } = pointTwo;\n    const y = x2 - x1;\n    const x = y2 - y1;\n    return Math.sqrt(x * x + y * y);\n  };\n\n  private measure(clickEvent: TerraDrawMouseEvent, secondCoordinate: Position) {\n    const { x, y } = this.project(secondCoordinate[0], secondCoordinate[1]);\n\n    const distance = this.pixelDistance(\n      { x, y },\n      { x: clickEvent.containerX, y: clickEvent.containerY }\n    );\n\n    return distance;\n  }\n\n  private close() {\n    if (!this.currentId) {\n      return;\n    }\n\n    // Reset the state back to starting state\n    this.currentCoordinate = 0;\n    this.currentId = undefined;\n    this.currentPointIds = [];\n\n    // Go back to started state\n    if (this.state === \"drawing\") {\n      this.setStarted();\n    }\n  }\n\n  /** @internal */\n  registerBehaviors(config: BehaviorConfig) { }\n\n  /** @internal */\n  start() {\n    this.setStarted();\n    this.setCursor(this.cursors.draw);\n  }\n\n  /** @internal */\n  stop() {\n    this.cleanUp();\n    this.setStopped();\n    this.setCursor(\"unset\");\n  }\n\n  /** @internal */\n  onMouseMove(event: TerraDrawMouseEvent) {\n    this.setCursor(this.cursors.draw);\n\n    if (!this.currentId || this.currentCoordinate === 0) {\n      return;\n    }\n\n    if (this.currentId) {\n      const currentLineGeometry = this.store.getGeometryCopy<LineString>(\n        this.currentId\n      );\n\n      // If the cursor is close the last line\n      // delete the current moving line and set the cursor to pointer\n      if (\n        this.measure(\n          event,\n          currentLineGeometry.coordinates[\n          currentLineGeometry.coordinates.length - 1\n          ]\n        ) < this.pointerDistance\n      ) {\n        this.setCursor(this.cursors.close);\n        if (this.moveLineId) {\n          this.store.delete([this.moveLineId]);\n          this.moveLineId = undefined;\n        }\n\n        return;\n      }\n    }\n\n    const currentLineGeometry = this.store.getGeometryCopy<LineString>(\n      this.currentId\n    );\n\n    const eventCoord = [event.lng, event.lat];\n\n    let closestPoint = this.routing.getClosestNetworkCoordinate(eventCoord);\n\n    if (!closestPoint) {\n      return;\n    }\n\n    const length = currentLineGeometry.coordinates.length - 1;\n\n    const geojsonRoute = this.routing.getRoute(\n      currentLineGeometry.coordinates[length],\n      closestPoint\n    );\n\n    if (!geojsonRoute) {\n      return;\n    }\n\n    if (!this.moveLineId) {\n      const [createdId] = this.store.create([\n        {\n          geometry: geojsonRoute.geometry,\n          properties: { mode: this.mode, isDrawnRoute: true, routeId: this.routeId },\n        },\n      ]);\n\n      this.moveLineId = createdId as string;\n    } else {\n      this.store.updateGeometry([\n        {\n          id: this.moveLineId,\n          geometry: geojsonRoute.geometry,\n        },\n      ]);\n    }\n  }\n\n  /** @internal */\n  onClick(event: TerraDrawMouseEvent) {\n    if (event.button === \"right\") {\n      return;\n    }\n\n    // this.setCursor(\"pointer\");\n\n    const eventCoord = [event.lng, event.lat] as Position;\n\n    if (this.currentId) {\n      const currentLineGeometry = this.store.getGeometryCopy<LineString>(\n        this.currentId\n      );\n\n      if (\n        this.measure(\n          event,\n          currentLineGeometry.coordinates[\n          currentLineGeometry.coordinates.length - 1\n          ]\n        ) < this.pointerDistance\n      ) {\n        if (this.currentCoordinate === 1) {\n          this.store.delete(this.currentPointIds);\n        }\n\n        this.close();\n\n        return;\n      }\n    } else {\n      this.routeId++;\n    }\n\n    let closestPoint = this.routing.getClosestNetworkCoordinate(eventCoord);\n\n    if (this.currentCoordinate === 0) {\n      if (closestPoint) {\n        const [createdId, pointId] = this.store.create([\n          {\n            geometry: {\n              type: \"LineString\",\n              coordinates: [closestPoint],\n            },\n            properties: { mode: this.mode, isDrawnRoute: true, routeId: this.routeId },\n          },\n          {\n            geometry: {\n              type: \"Point\",\n              coordinates: closestPoint,\n            },\n            properties: { mode: this.mode, isDrawnRoute: true, routeId: this.routeId },\n          },\n        ]);\n\n        this.currentId = createdId as string;\n        this.currentPointIds.push(pointId as string);\n        this.currentCoordinate++;\n\n        if (this.state === \"started\") {\n          this.setDrawing();\n        }\n      }\n    } else if (this.currentCoordinate === 1 && this.currentId && closestPoint) {\n      const currentLineGeometry = this.store.getGeometryCopy<LineString>(\n        this.currentId\n      );\n\n      const geojsonRoute = this.routing.getRoute(\n        currentLineGeometry.coordinates[0],\n        closestPoint\n      );\n      if (geojsonRoute) {\n        this.store.updateGeometry([\n          {\n            id: this.currentId,\n            geometry: geojsonRoute?.geometry,\n          },\n        ]);\n\n        const [pointId] = this.store.create([\n          {\n            geometry: {\n              type: \"Point\",\n              coordinates: closestPoint,\n            },\n            properties: { mode: this.mode, isDrawnRoute: true, routeId: this.routeId },\n          },\n        ]);\n\n        this.currentCoordinate = 2;\n        this.currentPointIds.push(pointId as string);\n      }\n\n      if (this.maxPoints === 1) {\n        this.close();\n\n        return;\n      }\n    } else if (\n      this.currentCoordinate > 1 &&\n      this.currentId &&\n      closestPoint &&\n      this.currentCoordinate <= this.maxPoints\n    ) {\n      const currentLineGeometry = this.store.getGeometryCopy<LineString>(\n        this.currentId\n      );\n\n      const length = currentLineGeometry.coordinates.length - 1;\n\n      const geojsonRoute = this.routing.getRoute(\n        currentLineGeometry.coordinates[length],\n        closestPoint\n      );\n\n      if (geojsonRoute) {\n        const newGeometry = {\n          ...currentLineGeometry,\n          coordinates: [\n            ...currentLineGeometry.coordinates,\n            ...geojsonRoute.geometry.coordinates,\n          ],\n        };\n\n        this.store.updateGeometry([\n          {\n            id: this.currentId,\n            geometry: newGeometry,\n          },\n        ]);\n\n        const [pointId] = this.store.create([\n          {\n            geometry: {\n              type: \"Point\",\n              coordinates: closestPoint,\n            },\n            properties: { mode: this.mode, isDrawnRoute: true, routeId: this.routeId },\n          },\n        ]);\n\n        if (this.maxPoints === this.currentCoordinate) {\n          this.close();\n        } else {\n          this.currentCoordinate++;\n          this.currentPointIds.push(pointId as string);\n        }\n      }\n    }\n  }\n\n  /** @internal */\n  onKeyDown() { }\n\n  /** @internal */\n  onKeyUp(event: TerraDrawKeyboardEvent) {\n    if (event.key === this.keyEvents.cancel) {\n      this.cleanUp();\n    }\n\n    if (event.key === this.keyEvents.finish) {\n      this.close();\n    }\n  }\n\n  /** @internal */\n  onDragStart() { }\n\n  /** @internal */\n  onDrag() { }\n\n  /** @internal */\n  onDragEnd() { }\n\n  /** @internal */\n  cleanUp() {\n    try {\n      if (this.currentId) {\n        this.store.delete([this.currentId, ...this.currentPointIds]);\n      }\n    } catch (error) { }\n\n    this.currentId = undefined;\n    this.moveLineId = undefined;\n    this.currentCoordinate = 0;\n    if (this.state === \"drawing\") {\n      this.setStarted();\n    }\n  }\n\n  /** @internal */\n  styleFeature(feature: GeoJSONStoreFeatures): TerraDrawAdapterStyling {\n    const styles = TerraDrawExtend.getDefaultStyling();\n\n    if (\n      feature.type === \"Feature\" &&\n      feature.geometry.type === \"LineString\" &&\n      feature.properties.mode === this.mode\n    ) {\n      styles.lineStringColor = this.getHexColorStylingValue(this.styles.lineStringColor, \"#B90E0A\", feature);\n      styles.lineStringWidth = this.getNumericStylingValue(this.styles.lineStringWidth, 4, feature);\n      styles.zIndex = 10;\n\n      return styles;\n    } else if (\n      feature.type === \"Feature\" &&\n      feature.geometry.type === \"Point\" &&\n      feature.properties.mode === this.mode\n    ) {\n      styles.pointColor = this.getHexColorStylingValue(this.styles.routePointColor, \"#B90E0A\", feature);\n      styles.pointOutlineColor = this.getHexColorStylingValue(this.styles.routePointColor, \"#B90E0A\", feature);\n      styles.pointOutlineWidth = this.getNumericStylingValue(this.styles.routePointOutlineWidth, 1, feature);\n\n      return styles;\n    }\n\n    return styles;\n  }\n\n  validateFeature(feature: unknown): ReturnType<Validation> {\n    return super.validateFeature(feature)\n  }\n\n  afterFeatureAdded(feature: GeoJSONStoreFeatures) { }\n\n}\n\nconst x = new TerraDrawRouteSnapMode();\n\nexport { Routing } from \"./routing\";"],"names":["ARRAY_TYPES","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","KDBush","numItems","nodeSize","ArrayType","data","ids","this","coords","_pos","_finished","IndexArrayType","isNaN","Error","Math","min","max","arrayTypeIndex","indexOf","coordsByteSize","BYTES_PER_ELEMENT","idsByteSize","padCoords","ArrayBuffer","set","_proto","prototype","add","x","y","index","finish","numAdded","sort","left","right","axis","m","select","k","n","z","log","s","exp","sd","sqrt","floor","t","i","j","swapItem","swap","arr","tmp","TinyQueue","compare","a","b","length","_down","push","item","_up","pop","top","bottom","peek","pos","parent","current","halfLength","bestChild","rad","PI","boxDist","lng","lat","cosLat","node","minLng","maxLng","minLat","maxLat","haverSin","haverSinDLng","extremumLat","cosDLng","atan","tan","vertexLat","haverSinDistPartial","compareDist","dist","theta","sin","cosLat1","lat1","lat2","cos","haverSinDist","lng1","lng2","Routing","options","_this","useCache","indexedNetworkPoints","points","routeFinder","network","routeCache","features","forEach","feature","geometry","coordinates","coordinate","getClosestNetworkCoordinate","inputCoordinate","aroundInput","maxResults","maxDistance","Infinity","maxHaverSinDist","result","undefined","q","id","midLng","midLat","nextAxis","leftNode","rightNode","candidate","around","getRoute","startCoord","endCoord","routeKey","route","type","properties","defaultKeyEvents","cancel","defaultCursors","draw","close","TerraDrawRouteSnapMode","_TerraDrawBaseDrawMod","call","mode","currentCoordinate","currentId","keyEvents","cursors","maxPoints","moveLineId","routing","currentPointIds","routeId","pixelDistance","pointOne","pointTwo","updateOptions","cleanUp","_extends","measure","clickEvent","secondCoordinate","_this$project","project","containerX","containerY","state","setStarted","registerBehaviors","config","start","setCursor","stop","setStopped","onMouseMove","event","currentLineGeometry","store","getGeometryCopy","pointerDistance","closestPoint","geojsonRoute","updateGeometry","_this$store$create","create","isDrawnRoute","onClick","button","eventCoord","_this$store$create2","pointId","setDrawing","newGeometry","concat","onKeyDown","onKeyUp","key","onDragStart","onDrag","onDragEnd","error","styleFeature","styles","TerraDrawExtend","getDefaultStyling","lineStringColor","getHexColorStylingValue","lineStringWidth","getNumericStylingValue","zIndex","pointColor","routePointColor","pointOutlineColor","pointOutlineWidth","routePointOutlineWidth","validateFeature","afterFeatureAdded","TerraDrawBaseDrawMode"],"mappings":"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"}